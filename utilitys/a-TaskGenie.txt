----------------------------------------
# C:\americo\API\TaskGenie\.env
# Archivo de configuración de variables sensibles.
DATABASE_URL=sqlite:///./taskgenie.db
SECRET_KEY=tu_clave_secreta
DEBUG_MODE=True

----------------------------------------
# C:\americo\API\TaskGenie\auth.py
# auth.py (ubicado en C:\americo\API\TaskGenie\auth.py)
# auth.py (ubicado en C:\americo\API\TaskGenie\auth.py)
from fastapi import APIRouter, Depends, Form
from sqlalchemy.orm import Session
from database import SessionLocal, Usuario
from pydantic import BaseModel

router = APIRouter()

# Dependencia para obtener la sesión de la base de datos.
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Schema para registrar un usuario (para solicitudes JSON).
class UsuarioCreate(BaseModel):
    nombre: str
    apellido: str
    edad: int
    fecha_nacimiento: str  # Formato YYYY-MM-DD
    email: str
    clave: str  # Se enviará en texto plano (solo para práctica)

# Endpoint para registrar un usuario usando JSON.
@router.post("/registro/")
def registrar_usuario_json(usuario: UsuarioCreate, db: Session = Depends(get_db)):
    nuevo_usuario = Usuario(nombre=usuario.nombre,  apellido=usuario.apellido, edad=usuario.edad, fecha_nacimiento=usuario.fecha_nacimiento,email=usuario.email, clave=usuario.clave)
    db.add(nuevo_usuario)
    db.commit()
    db.refresh(nuevo_usuario)
    return {"mensaje": "Usuario registrado correctamente (JSON)", "id": nuevo_usuario.id}

# Endpoint para registrar un usuario usando datos de formulario.
@router.post("/registro_form")
def registrar_usuario_form(
    nombre: str = Form(...),
    apellido: str = Form(...),
    edad : int = Form(...),
    fecha_nacimiento: str = Form(...),  # Formato YYYY-MM-DD
    email: str = Form(...),
    clave: str = Form(...),
    db: Session = Depends(get_db)
):
    nuevo_usuario = Usuario(nombre=nombre, apellido=apellido, edad=edad, fecha_nacimiento=fecha_nacimiento,email=email, clave=clave)
    db.add(nuevo_usuario)
    db.commit()
    db.refresh(nuevo_usuario)
    return {"mensaje": "Usuario registrado correctamente (Form)", "id": nuevo_usuario.id}

# Endpoint para recuperar la contraseña por email.
@router.get("/recuperar/{email}")
def recuperar_clave(email: str, db: Session = Depends(get_db)):
    usuario = db.query(Usuario).filter(Usuario.email == email).first()
    if usuario:
        return {"mensaje": f"La contraseña para {email} es: {usuario.clave}"}
    return {"error": "Usuario no encontrado"}

# -----------------------------------------------
# Endpoint para login usando JSON (cuerpo de la petición).
class UsuarioLogin(BaseModel):
    email: str
    clave: str

@router.post("/login_json")
def login_json(usuario: UsuarioLogin, db: Session = Depends(get_db)):
    db_usuario = db.query(Usuario).filter(Usuario.email == usuario.email).first()
    if not db_usuario:
        return {"error": "Credenciales inválidas"}
    if db_usuario.clave != usuario.clave:
        return {"error": "Credenciales inválidas"}
    return {"mensaje": "Login exitoso (JSON)", "usuario_id": db_usuario.id}

# -----------------------------------------------
# Endpoint para login usando datos de formulario.
@router.post("/login_form")
def login_form(
    email: str = Form(...),
    clave: str = Form(...),
    db: Session = Depends(get_db)
):
    db_usuario = db.query(Usuario).filter(Usuario.email == email).first()
    if not db_usuario:
        return {"error": "Credenciales inválidas"}
    if db_usuario.clave != clave:
        return {"error": "Credenciales inválidas"}
    return {"mensaje": "Login exitoso (Form)", "usuario_id": db_usuario.id}

----------------------------------------
# C:\americo\API\TaskGenie\config.py
# congig.py
# # Manejo de variables de entorno.
import os
from dotenv import load_dotenv

load_dotenv()

class Settings:
    DATABASE_URL: str = os.getenv("DATABASE_URL")
    SECRET_KEY: str = os.getenv("SECRET_KEY")
    DEBUG_MODE: bool = os.getenv("DEBUG_MODE", "False").lower() == "true"

settings = Settings()

----------------------------------------
# C:\americo\API\TaskGenie\database.py
# database.py
# Configuración de la conexión a SQLite.
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.orm import sessionmaker, declarative_base

# Conectar a SQLite
DATABASE_URL = "sqlite:///./taskgenie.db"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Base de datos
Base = declarative_base()

# Modelo de Usuario
class Usuario(Base):
    __tablename__ = "usuarios"
    id = Column(Integer, primary_key=True, index=True)
    nombre = Column(String, nullable=False)
    apellido = Column(String, nullable=False)
    edad = Column(Integer, nullable=False)
    fecha_nacimiento = Column(String, nullable=False)  # Formato YYYY-MM-DD
    email = Column(String, unique=True, nullable=False)
    clave = Column(String, nullable=False)  # Aquí se guarda la contraseña en texto plano (No recomendado en producción)

# Crear tablas en la BD
Base.metadata.create_all(bind=engine)


----------------------------------------
# C:\americo\API\TaskGenie\main.py
# main.py - Punto de arranque de la aplicación.
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
from fastapi.templating import Jinja2Templates

# Importa el router de autenticación y otros routers.
from auth import router as auth_router
from routers import usuarios, tareas, perfil, admin
from routers import usuarios  # Asegúrate de que la ruta sea la correcta



app = FastAPI(title="TaskGenie")
templates = Jinja2Templates(directory="templates")

app.include_router(auth_router, tags=["Autenticación"])
app.include_router(usuarios.router, prefix="/usuarios", tags=["Usuarios"])
app.include_router(tareas.router, prefix="/tareas", tags=["Tareas"])
app.include_router(perfil.router, prefix="/perfil", tags=["Perfil"])
app.include_router(admin.router, prefix="/admin", tags=["Administración"])
app.include_router(usuarios.router, prefix="/usuarios", tags=["Usuarios"])

@app.get("/")
async def index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# Endpoint para mostrar la página de registro (HTML) 
@app.get("/registro")
async def registro(request: Request):
    return templates.TemplateResponse("registro.html", {"request": request})

@app.exception_handler(404)
async def not_found_exception_handler(request: Request, exc: HTTPException):
    accept = request.headers.get("accept", "")
    if "text/html" in accept:
        return templates.TemplateResponse("errores.html", {"request": request, "mensaje": "La página que buscas no fue encontrada. Por favor, revisa la URL o regresa al inicio."}, status_code=404)
    return JSONResponse(status_code=404, content={"detail": "La página que buscas no fue encontrada. Por favor, revisa la URL o regresa al inicio."})

----------------------------------------
# C:\americo\API\TaskGenie\models.py
# models.py
# Modelos de SQLAlchemy.
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, Date, Enum
import enum

Base = declarative_base()

class RolEnum(enum.Enum):
    profesor = "profesor"
    alumno = "alumno"
    administrador = "administrador"

class Usuario(Base):
    __tablename__ = "usuarios"
    id = Column(Integer, primary_key=True, index=True)
    nombre = Column(String, nullable=False)
    apellido = Column(String, nullable=False)
    email = Column(String, unique=True, nullable=False)
    clave = Column(String, nullable=False)  # Almacenada como hash
    fecha_nacimiento = Column(Date)
    rol = Column(Enum(RolEnum), nullable=False)

class Tarea(Base):
    __tablename__ = "tareas"
    id = Column(Integer, primary_key=True, index=True)
    titulo = Column(String, nullable=False)
    descripcion = Column(String)
    importancia = Column(String)
    fecha_entrega = Column(Date)
    estado = Column(String, default="asignada")
    asignado_a = Column(Integer)  # Referencia al id del alumno
    # Agrega otros campos como solución o correcciones

----------------------------------------
# C:\americo\API\TaskGenie\requirements.txt
# Error al leer este archivo: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

----------------------------------------
# C:\americo\API\TaskGenie\schemas.py
#  schemas.py
# Schemas con Pydantic.
from pydantic import BaseModel, EmailStr
from datetime import date
from enum import Enum

class RolEnum(str, Enum):
    profesor = "profesor"
    alumno = "alumno"
    administrador = "administrador"

class UsuarioCreate(BaseModel):
    nombre: str
    apellido: str
    email: EmailStr
    clave: str
    fecha_nacimiento: date
    rol: RolEnum

class UsuarioResponse(BaseModel):
    id: int
    nombre: str
    apellido: str
    email: EmailStr
    fecha_nacimiento: date
    rol: RolEnum
    class Config:
        orm_mode = True

# Define esquemas para Tarea y otras entidades según lo necesites.

----------------------------------------
# C:\americo\API\TaskGenie\taskgenie.db
# Error al leer este archivo: 'utf-8' codec can't decode byte 0x86 in position 98: invalid start byte

----------------------------------------
# C:\americo\API\TaskGenie\__init__.py

----------------------------------------
# C:\americo\API\TaskGenie\routers\admin.py
# Endpoints para administración de usuarios.
# routers/admin.py
from fastapi import APIRouter

router = APIRouter()

@router.get("/")
def listar_tareas():
    return {"mensaje": "Listado de tareas"}

----------------------------------------
# C:\americo\API\TaskGenie\routers\perfil.py
# Endpoints para ver y editar la información del perfil.
# routers/perfil.py
from fastapi import APIRouter

router = APIRouter()

@router.get("/")
def listar_tareas():
    return {"mensaje": "Listado de tareas"}

----------------------------------------
# C:\americo\API\TaskGenie\routers\tareas.py
# Endpoints para la gestión de tareas.
# routers/tareas.py
from fastapi import APIRouter

router = APIRouter()

@router.get("/")
def listar_tareas():
    return {"mensaje": "Listado de tareas"}

----------------------------------------
# C:\americo\API\TaskGenie\routers\usuarios.py
# C:\americo\API\TaskGenie\routers\usuarios.py

from fastapi import APIRouter, Depends, Form, HTTPException, status
from sqlalchemy.exc import IntegrityError
from sqlalchemy.orm import Session
from database import SessionLocal, Usuario
from pydantic import BaseModel

router = APIRouter()

# Dependencia para obtener la sesión de la base de datos.
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# -------------------------------------------------------------------
# Esquema para registrar un usuario (para solicitudes JSON)
class UsuarioCreate(BaseModel):
    nombre: str
    apellido: str
    edad: int
    fecha_nacimiento: str  # Formato YYYY-MM-DD
    email: str
    clave: str  # Se espera plaintext (solo para práctica)
    
# Endpoint para registrar un usuario usando JSON.
@router.post("/registro/")
def registrar_usuario_json(usuario: UsuarioCreate, db: Session = Depends(get_db)):
    # Verificar si ya existe un usuario con el mismo email.
    existing_user = db.query(Usuario).filter(Usuario.email == usuario.email).first()
    if existing_user:
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail="Ya existe un usuario con ese email."
        )
    
    nuevo_usuario = Usuario(
        nombre=usuario.nombre,
        apellido=usuario.apellido,
        edad=usuario.edad,
        fecha_nacimiento=usuario.fecha_nacimiento,
        email=usuario.email,
        clave=usuario.clave
    )
    db.add(nuevo_usuario)
    try:
        db.commit()
    except IntegrityError:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail="Error al registrar el usuario. Probablemente ya existe ese email."
        )
    db.refresh(nuevo_usuario)
    return {"mensaje": "Usuario registrado correctamente (JSON)", "id": nuevo_usuario.id}

# -------------------------------------------------------------------
# Endpoint para registrar un usuario usando datos de formulario.
@router.post("/registro_form")
def registrar_usuario_form(
    nombre: str = Form(...),
    apellido: str = Form(...),
    edad: int = Form(...),
    fecha_nacimiento: str = Form(...),  # Formato YYYY-MM-DD
    email: str = Form(...),
    clave: str = Form(...),
    db: Session = Depends(get_db)
):
    # Verificar si el email ya existe.
    existing_user = db.query(Usuario).filter(Usuario.email == email).first()
    if existing_user:
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail="Ya existe un usuario con ese email."
        )
    
    nuevo_usuario = Usuario(
        nombre=nombre,
        apellido=apellido,
        edad=edad,
        fecha_nacimiento=fecha_nacimiento,
        email=email,
        clave=clave
    )
    db.add(nuevo_usuario)
    try:
        db.commit()
    except IntegrityError:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail="Error al registrar el usuario, ya existe ese email."
        )
    db.refresh(nuevo_usuario)
    return {"mensaje": "Usuario registrado correctamente (Form)", "id": nuevo_usuario.id}

# -------------------------------------------------------------------
# Endpoint para recuperar la contraseña por email.
@router.get("/recuperar/{email}")
def recuperar_clave(email: str, db: Session = Depends(get_db)):
    usuario = db.query(Usuario).filter(Usuario.email == email).first()
    if usuario:
        return {"mensaje": f"La contraseña para {email} es: {usuario.clave}"}
    else:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Usuario no encontrado."
        )

# -------------------------------------------------------------------
# Esquema para login (para solicitudes JSON)
class UsuarioLogin(BaseModel):
    email: str
    clave: str

# Endpoint para login usando JSON.
@router.post("/login_json")
def login_json(usuario: UsuarioLogin, db: Session = Depends(get_db)):
    db_usuario = db.query(Usuario).filter(Usuario.email == usuario.email).first()
    if not db_usuario or db_usuario.clave != usuario.clave:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Credenciales inválidas."
        )
    return {"mensaje": "Login exitoso (JSON)", "usuario_id": db_usuario.id}

# -------------------------------------------------------------------
# Endpoint para login usando datos de formulario.
@router.post("/login_form")
def login_form(
    email: str = Form(...),
    clave: str = Form(...),
    db: Session = Depends(get_db)
):
    db_usuario = db.query(Usuario).filter(Usuario.email == email).first()
    if not db_usuario or db_usuario.clave != clave:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Credenciales inválidas."
        )
    return {"mensaje": "Login exitoso (Form)", "usuario_id": db_usuario.id}

----------------------------------------
# C:\americo\API\TaskGenie\routers\__init__.py

----------------------------------------
# C:\americo\API\TaskGenie\templates\dashboard_admin.html
<!-- Dashboard para administradores -->

----------------------------------------
# C:\americo\API\TaskGenie\templates\dashboard_alumno.html
<!-- Dashboard para alumnos -->

----------------------------------------
# C:\americo\API\TaskGenie\templates\dashboard_profesor.html
<!-- Dashboard para profesores -->

----------------------------------------
# C:\americo\API\TaskGenie\templates\errores.html
<!-- html para manejo de errores -->
<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>Error 404 - No Encontrado</title>
  </head>
  <body>
    <h1>Error 404</h1>
    <p>{{ mensaje }}</p>
    <a href="/">Volver al inicio</a>
  </body>
</html>

----------------------------------------
# C:\americo\API\TaskGenie\templates\index.html
<!-- index.html - Página de inicio con formulario de login -->
<!-- templates/index.html - Página de inicio con formulario de login -->
<!-- templates/index.html -->
<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>TaskGenie - Login con Form</title>
  </head>
  <body>
    <h1>Login usando Form</h1>
    <form action="/login_form" method="post">
      <label>Email:</label>
      <input type="text" name="email" required />
      <br />
      <label>Clave:</label>
      <input type="password" name="clave" required />
      <br />
      <button type="submit">Ingresar</button>
    </form>
    <p>¿No tienes una cuenta? <a href="/registro">Regístrate aquí</a></p>
  </body>
</html>

----------------------------------------
# C:\americo\API\TaskGenie\templates\login.html
<!-- Vista de login -->

----------------------------------------
# C:\americo\API\TaskGenie\templates\registro.html
<!-- Formulario de registro -->
<!-- templates/registro.html -->
<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>Registro de Usuario - TaskGenie</title>
  </head>
  <body>
    <h1>Registro de Usuario</h1>
    <form action="/registro_form" method="post">
      <label for="nombre">Nombre:</label>
      <input type="text" id="nombre" name="nombre" required />
      <br />

      <label for="apellido">Apellido:</label>
      <input type="text" id="apellido" name="apellido" required />
      <br />

      <label for="edad">Edad:</label>
      <input type="number" id="edad" name="edad" required />
      <br />

      <label for="fecha_nacimiento">Fecha de Nacimiento (YYYY-MM-DD):</label>
      <input
        type="text"
        id="fecha_nacimiento"
        name="fecha_nacimiento"
        placeholder="YYYY-MM-DD"
        required
      />
      <br />

      <label for="email">Email:</label>
      <input type="email" id="email" name="email" required />
      <br />

      <label for="clave">Clave:</label>
      <input type="password" id="clave" name="clave" required />
      <br />

      <button type="submit">Registrarse</button>
    </form>
    <p><a href="/">Volver al inicio</a></p>
  </body>
</html>

