----------------------------------------
# C:\americo\API\TaskGenie\.env
# Archivo de configuración de variables sensibles.
# Archivo raíz: .env
DATABASE_URL=sqlite:///instance/taskgenie.db
SECRET_KEY=tu_clave_secreta
DEBUG_MODE=True


----------------------------------------
# C:\americo\API\TaskGenie\auth.py
# auth.py (ubicado en C:\americo\API\TaskGenie\auth.py)
# auth.py
# auth.py
from fastapi import (
    APIRouter, Depends, Form, Request, HTTPException, status
)
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session

from database import SessionLocal
from services.auth_service import autenticar_usuario, registrar_usuario

router    = APIRouter(tags=["Autenticación"])
templates = Jinja2Templates(directory="templates")

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@router.get("/login", response_class=HTMLResponse)
def login_form_get(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@router.post("/login_form")
def login_form(
    request: Request,
    email: str = Form(...),
    clave: str = Form(...),
    db: Session = Depends(get_db)
):
    user = autenticar_usuario(db, email, clave)
    if not user:
        return templates.TemplateResponse(
            "index.html",
            {"request": request, "error": "Credenciales inválidas."}
        )

    # destino según rol
    if user.rol.value == "administrador":
        destino = "/dashboard_admin"
    elif user.rol.value == "profesor":
        destino = "/dashboard_profesor"
    else:
        destino = "/dashboard_alumno"

    response = RedirectResponse(url=destino, status_code=status.HTTP_302_FOUND)
    response.set_cookie("user_id", str(user.id), httponly=True)
    return response

@router.get("/registro", response_class=HTMLResponse)
def registro_form_get(request: Request):
    return templates.TemplateResponse("registro.html", {"request": request})

@router.post("/registro_form", response_class=HTMLResponse)
def registro_form_post(
    request: Request,
    nombre: str = Form(...),
    apellido: str = Form(...),
    edad: int = Form(...),                   
    fecha_nacimiento: str = Form(...),
    email: str = Form(...),
    rol: str = Form(...),
    clave: str = Form(...),
    db: Session = Depends(get_db)
):
    try:
        # registrar_usuario parsea fecha y maneja IntegrityError
        registrar_usuario(
            db,
            nombre=nombre,
            apellido=apellido,
            email=email,
            edad=edad,
            fecha_nacimiento=fecha_nacimiento,
            rol=rol,
            clave=clave
        )
    except ValueError as e:
        # vuelvo a mostrar el formulario con el mensaje de error
        return templates.TemplateResponse(
            "registro.html",
            {"request": request, "error": str(e)}
        )

    # al crear OK, redirijo al login
    return RedirectResponse(url="/login", status_code=status.HTTP_302_FOUND)

----------------------------------------
# C:\americo\API\TaskGenie\config.py
# congig.py
# # Manejo de variables de entorno.
# config.py
from pydantic_settings import BaseSettings  # ← Corrección
from pydantic import AnyUrl

class Settings(BaseSettings):
    database_url: AnyUrl
    secret_key: str
    debug_mode: bool = False

    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"

settings = Settings()

----------------------------------------
# C:\americo\API\TaskGenie\database.py
# database.py
# app/database.py
import os
from pathlib import Path
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from config import settings

# Convertimos a string
raw_url = str(settings.database_url)

# Solo para SQLite local: garantizamos carpeta 'instance'
if raw_url.startswith("sqlite:///"):
    # extraemos la parte después de sqlite:///
    relative_path = raw_url.replace("sqlite:///", "")
    db_file = Path(relative_path)
    instance_dir = db_file.parent

    # Si la carpeta no existe, la creamos
    if not instance_dir.exists():
        instance_dir.mkdir(parents=True, exist_ok=True)

    db_url = f"sqlite:///{relative_path}"
    connect_args = {"check_same_thread": False}
else:
    db_url = raw_url
    connect_args = {}

engine = create_engine(db_url, connect_args=connect_args)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


----------------------------------------
# C:\americo\API\TaskGenie\main.py
# main.py - Punto de arranque de la aplicación.

# main.py
from fastapi import FastAPI, Request, HTTPException, Depends, Cookie
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session

from database import engine, SessionLocal
from models import Base, Usuario
from auth import router as auth_router
from routers import admin, tareas, perfil, usuarios

# Creamos tablas si no existen
Base.metadata.create_all(bind=engine)

app = FastAPI(title="TaskGenie")
templates = Jinja2Templates(directory="templates")

# Montamos routers
app.include_router(auth_router)
app.include_router(admin.router)
app.include_router(tareas.router, prefix="/tareas", tags=["Tareas"])
app.include_router(perfil.router, prefix="/perfil", tags=["Perfil"])
app.include_router(usuarios.router, prefix="/u", tags=["Usuarios"])

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def get_current_user(
    user_id: str | None = Cookie(None),
    db: Session = Depends(get_db)
) -> Usuario | None:
    if user_id:
        return db.get(Usuario, int(user_id))
    return None

@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/dashboard", response_class=HTMLResponse)
async def dashboard(
    request: Request,
    user: Usuario | None = Depends(get_current_user)
):
    return templates.TemplateResponse(
        "dashboard.html",
        {"request": request, "user": user}
    )

@app.get("/dashboard_admin", response_class=HTMLResponse)
async def dashboard_admin(
    request: Request,
    user: Usuario | None = Depends(get_current_user)
):
    if not user or user.rol.value != "administrador":
        # Si no es admin, prohibimos el acceso
        raise HTTPException(status_code=403, detail="Acceso denegado")
    return templates.TemplateResponse(
        "dashboard_admin.html",
        {"request": request, "user": user}
    )

@app.exception_handler(404)
async def not_found(request: Request, exc: HTTPException):
    if "text/html" in request.headers.get("accept", ""):
        return templates.TemplateResponse(
            "errores.html",
            {"request": request, "mensaje": "Página no encontrada."},
            status_code=404
        )
    return JSONResponse(status_code=404, content={"detail": "Not found"})

----------------------------------------
# C:\americo\API\TaskGenie\models.py
# models.py
import enum
from sqlalchemy import (
    Column, Integer, String, Date, Enum, Boolean, ForeignKey
)
from sqlalchemy.orm import declarative_base, relationship

Base = declarative_base()

class RolEnum(enum.Enum):
    profesor      = "profesor"
    alumno        = "alumno"
    administrador = "administrador"

class Usuario(Base):
    __tablename__ = "usuarios"

    id               = Column(Integer,  primary_key=True, index=True)
    nombre           = Column(String,   nullable=False)
    apellido         = Column(String,   nullable=False)
    edad             = Column(Integer,  nullable=False)
    email            = Column(String,   unique=True, nullable=False)
    clave            = Column(String,   nullable=False)
    fecha_nacimiento = Column(Date,     nullable=False)
    rol              = Column(Enum(RolEnum), nullable=False)
    bloqueado        = Column(Boolean, default=False)

    tareas_creadas   = relationship(
        "Tarea", back_populates="creador",
        foreign_keys="Tarea.creador_id"
    )
    tareas_asignadas = relationship(
        "Tarea", back_populates="asignado",
        foreign_keys="Tarea.asignado_a"
    )

class Tarea(Base):
    __tablename__ = "tareas"

    id            = Column(Integer, primary_key=True, index=True)
    titulo        = Column(String,  nullable=False)
    descripcion   = Column(String)
    importancia   = Column(String)
    fecha_entrega = Column(Date)
    estado        = Column(String, default="asignada")
    solucion      = Column(String)

    creador_id = Column(Integer, ForeignKey("usuarios.id"))
    asignado_a = Column(Integer, ForeignKey("usuarios.id"))

    creador  = relationship("Usuario", back_populates="tareas_creadas",
                             foreign_keys=[creador_id])
    asignado = relationship("Usuario", back_populates="tareas_asignadas",
                             foreign_keys=[asignado_a])

----------------------------------------
# C:\americo\API\TaskGenie\schemas.py
#  schemas.py
# Schemas con Pydantic.
# schemas.py
from pydantic import BaseModel, EmailStr
from datetime import date
from enum import Enum

class RolEnum(str, Enum):
    profesor      = "profesor"
    alumno        = "alumno"
    administrador = "administrador"

class UsuarioCreate(BaseModel):
    nombre: str
    apellido: str
    edad: int
    email: EmailStr
    clave: str
    fecha_nacimiento: date
    rol: RolEnum

class UsuarioResponse(BaseModel):
    id: int
    nombre: str
    apellido: str
    email: EmailStr
    edad: int
    fecha_nacimiento: date
    rol: RolEnum
    bloqueado: bool

    class Config:
        from_attributes = True  # Pydantic V2

class UsuarioUpdateRol(BaseModel):
    rol: RolEnum

class UsuarioUpdateBloqueo(BaseModel):
    bloqueado: bool

class MensajeResponse(BaseModel):
    mensaje: str

class Tarea(BaseModel):
    id: int
    titulo: str
    descripcion: str
    importancia: str
    fecha_entrega: date
    estado: str
    solucion: str   
    creador_id: int
    asignado_a: int 
    
----------------------------------------
# C:\americo\API\TaskGenie\routers\admin.py
# # Endpoints para administración de usuarios.
# # routers/admin.py
# 
# routers/admin.py
from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session
from typing import List, Optional

from database import SessionLocal
from models import Usuario
from schemas import UsuarioResponse, UsuarioUpdateRol, UsuarioUpdateBloqueo, MensajeResponse

router = APIRouter(prefix="/admin", tags=["Administración"])

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@router.get("/usuarios", response_model=List[UsuarioResponse], summary="Listar todos los usuarios")
def listar_usuarios(db: Session = Depends(get_db)):
    """Obtiene una lista de todos los usuarios almacenados en la base de datos."""
    return db.query(Usuario).all()

@router.get("/usuarios/search", response_model=List[UsuarioResponse], summary="Buscar usuarios por email y/o rol")
def buscar_usuarios(
    rol: Optional[str] = Query(None, description="Filtrar por rol"),
    email: Optional[str] = Query(None, description="Buscar por email"),
    db: Session = Depends(get_db)
):
    """Busca usuarios filtrando por rol y/o email."""
    query = db.query(Usuario)
    if rol:
        query = query.filter(Usuario.rol == rol)
    if email:
        query = query.filter(Usuario.email.ilike(f"%{email}%"))
    
    usuarios = query.all()
    
    if not usuarios:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="No se encontraron usuarios con los criterios dados")
    
    return usuarios

@router.get("/usuarios/{user_id}", response_model=UsuarioResponse, summary="Obtener detalle de un usuario por ID")
def detalle_usuario(user_id: int, db: Session = Depends(get_db)):
    """Obtiene detalles de un usuario por su ID."""
    usuario = db.get(Usuario, user_id)
    if not usuario:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Usuario no encontrado")
    return usuario

@router.put("/usuarios/{user_id}/rol", response_model=UsuarioResponse, summary="Actualizar rol de un usuario")
def cambiar_rol(user_id: int, upd: UsuarioUpdateRol, db: Session = Depends(get_db)):
    """Cambia el rol de un usuario con el ID proporcionado."""
    usuario = db.get(Usuario, user_id)
    if not usuario:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Usuario no encontrado")
    usuario.rol = upd.rol
    db.commit()
    db.refresh(usuario)
    return usuario

@router.put("/usuarios/{user_id}/bloqueo", response_model=UsuarioResponse, summary="Actualizar estado de bloqueo de un usuario")
def cambiar_bloqueo(user_id: int, upd: UsuarioUpdateBloqueo, db: Session = Depends(get_db)):
    """Actualiza el estado de bloqueo de un usuario con el ID proporcionado."""
    usuario = db.get(Usuario, user_id)
    if not usuario:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Usuario no encontrado")
    usuario.bloqueado = upd.bloqueado
    db.commit()
    db.refresh(usuario)
    return usuario

@router.delete("/usuarios/{user_id}", response_model=MensajeResponse, summary="Eliminar un usuario")
def eliminar_usuario(user_id: int, db: Session = Depends(get_db)):
    """Elimina un usuario por su ID."""
    usuario = db.get(Usuario, user_id)
    if not usuario:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Usuario no encontrado")
    db.delete(usuario)
    db.commit()
    return MensajeResponse(mensaje="Usuario eliminado con éxito")

----------------------------------------
# C:\americo\API\TaskGenie\routers\perfil.py
# Endpoints para ver y editar la información del perfil.
# routers/perfil.py
from fastapi import APIRouter

router = APIRouter()

@router.get("/")
def perfil():
    return {"mensaje": "Perfil del usuario"}


----------------------------------------
# C:\americo\API\TaskGenie\routers\tareas.py
# Endpoints para la gestión de tareas.
# routers/tareas.py
from fastapi import APIRouter

router = APIRouter()

@router.get("/")
def listar_tareas():
    return {"mensaje": "Listado de tareas"}


----------------------------------------
# C:\americo\API\TaskGenie\routers\usuarios.py
# C:\americo\API\TaskGenie\routers\usuarios.py
# routers/usuarios.py
from fastapi import APIRouter, Depends, Form, HTTPException, status
from sqlalchemy.exc import IntegrityError
from sqlalchemy.orm import Session
from pydantic import BaseModel

from database import SessionLocal
from models import Usuario

router = APIRouter(tags=["Usuarios"])

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

class UsuarioCreateForm(BaseModel):
    nombre: str
    apellido: str
    edad: int
    fecha_nacimiento: str
    email: str
    clave: str

@router.post("/registro-json")
def registrar_json(u: UsuarioCreateForm, db: Session = Depends(get_db)):
    existing = db.query(Usuario).filter(Usuario.email == u.email).first()
    if existing:
        raise HTTPException(409, "Email ya registrado")
    nuevo = Usuario(
        nombre=u.nombre,
        apellido=u.apellido,
        email=u.email,
        clave=u.clave,
        fecha_nacimiento=u.fecha_nacimiento,  # se parsea en auth_service
        rol="alumno"  # o lo que definas
    )
    db.add(nuevo)
    try:
        db.commit()
    except IntegrityError:
        db.rollback()
        raise HTTPException(409, "Email ya registrado")
    db.refresh(nuevo)
    return {"mensaje": "Usuario creado", "id": nuevo.id}

----------------------------------------
# C:\americo\API\TaskGenie\services\auth_service.py
# services/auth_service.py
from sqlalchemy.exc import IntegrityError
from datetime import datetime
from models import Usuario

def registrar_usuario(db, *, nombre, apellido, edad, email, fecha_nacimiento, rol, clave):
    # Convertir fecha de string a date
    if isinstance(fecha_nacimiento, str):
        try:
            fecha_nacimiento = datetime.strptime(fecha_nacimiento, "%Y-%m-%d").date()
        except ValueError:
            raise ValueError("Fecha debe tener formato YYYY-MM-DD.")

    usuario = Usuario(
        nombre=nombre,
        apellido=apellido,
        edad=edad, 
        email=email,
        clave=clave,  # → en producción usa hashing
        fecha_nacimiento=fecha_nacimiento,
        rol=rol
    )
    db.add(usuario)
    try:
        db.commit()
    except IntegrityError:
        db.rollback()
        raise ValueError("Ya existe un usuario con ese email.")
    db.refresh(usuario)
    return usuario

def autenticar_usuario(db, email: str, clave: str):
    usuario = db.query(Usuario).filter(Usuario.email == email).first()
    if usuario and usuario.clave == clave:
        return usuario
    return None

----------------------------------------
# C:\americo\API\TaskGenie\templates\dashboard_admin.html
<!-- templates/dashboard_admin.html -->
<!-- templates/dashboard_admin.html -->
<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>Dashboard Administrador - TaskGenie</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 20px;
      }
      header {
        margin-bottom: 20px;
      }
      nav {
        background-color: #333;
        color: #fff;
        padding: 10px;
        margin-bottom: 20px;
      }
      nav ul {
        list-style: none;
        display: flex;
        align-items: center;
        padding: 0;
        margin: 0;
      }
      nav ul li {
        margin-right: 20px;
      }
      nav ul li a {
        color: #fff;
        text-decoration: none;
        cursor: pointer;
      }
      .salir {
        margin-left: auto;
        background: #c00;
        padding: 5px 10px;
        border-radius: 4px;
      }
      section {
        margin-top: 20px;
        display: none;
      }
      table {
        width: 100%;
        border-collapse: collapse;
      }
      th,
      td {
        border: 1px solid #ccc;
        padding: 8px;
        text-align: left;
      }
      button {
        padding: 4px 8px;
        cursor: pointer;
      }
    </style>
  </head>
  <body>
    <header>
      <h1>Panel de Administración</h1>
      <p>
        Usuario: {{ user.nombre }} {{ user.apellido }} • Rol: {{ user.rol.value
        }}
      </p>
      <hr />
    </header>

    <nav>
      <ul>
        <li><a onclick="showSection('listado')">Listado de Usuarios</a></li>
        <li><a onclick="showSection('detalle')">Detalle de Usuario</a></li>
        <li><a onclick="showSection('rol')">Actualizar Rol</a></li>
        <li><a onclick="showSection('bloqueo')">Actualizar Bloqueo</a></li>
        <li><a onclick="showSection('buscar')">Buscar Usuarios</a></li>
        <li class="salir"><a href="/login">Cerrar sesión</a></li>
      </ul>
    </nav>

    <!-- 1: Listado de Usuarios -->
    <section id="listado">
      <h2>Listado de Usuarios</h2>
      <table id="tabla-usuarios">
        <thead>
          <tr>
            <th>ID</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Edad</th>
            <th>Email</th>
            <th>Rol</th>
            <th>Bloqueado</th>
            <th>Ver</th>
            <th>Eliminar</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </section>

    <!-- 2: Detalle de Usuario -->
    <section id="detalle">
      <h2>Detalle de Usuario</h2>
      <form onsubmit="event.preventDefault(); verDetalleEmail();">
        <label for="detalleEmail">Email:</label>
        <input type="email" id="detalleEmail" required />
        <button type="submit">Buscar</button>
      </form>
      <div id="detalle-usuario"></div>
    </section>

    <!-- 3: Actualizar Rol -->
    <section id="rol">
      <h2>Actualizar Rol de Usuario</h2>
      <form onsubmit="event.preventDefault(); actualizarRolEmail();">
        <label for="rolEmail">Email:</label>
        <input type="email" id="rolEmail" required /><br />
        <label for="nuevoRol">Nuevo Rol:</label>
        <select id="nuevoRol" required>
          <option value="profesor">Profesor</option>
          <option value="alumno">Alumno</option>
          <option value="administrador">Administrador</option>
        </select>
        <button type="submit">Actualizar</button>
      </form>
    </section>

    <!-- 4: Actualizar Bloqueo -->
    <section id="bloqueo">
      <h2>Actualizar Estado de Bloqueo</h2>
      <form onsubmit="event.preventDefault(); actualizarBloqueoEmail();">
        <label for="bloqEmail">Email:</label>
        <input type="email" id="bloqEmail" required /><br />
        <label for="estadoBloqueo">Bloquear Usuario:</label>
        <select id="estadoBloqueo" required>
          <option value="true">Sí</option>
          <option value="false" selected>No</option>
        </select>
        <button type="submit">Actualizar</button>
      </form>
    </section>

    <!-- 5: Buscar Usuarios por Email -->
    <section id="buscar">
      <h2>Buscar Usuarios</h2>
      <form onsubmit="event.preventDefault(); buscarUsuarios();">
        <label for="filtroEmail">Email:</label>
        <input type="text" id="filtroEmail" placeholder="Buscar por email" />
        <button type="submit">Buscar</button>
      </form>
      <div id="resultadosBusqueda"></div>
    </section>

    <script>
      // Mostrar sección y cargar listado
      function showSection(id) {
        document
          .querySelectorAll("section")
          .forEach((s) => (s.style.display = "none"));
        document.getElementById(id).style.display = "block";
        if (id === "listado") cargarUsuarios();
      }
      window.onload = () => showSection("listado");

      // 1: Listado de usuarios
      function cargarUsuarios() {
        fetch("/admin/usuarios")
          .then((r) => r.json())
          .then((usuarios) => {
            const tbody = document.querySelector("#tabla-usuarios tbody");
            tbody.innerHTML = "";
            usuarios.forEach((u) => {
              const tr = document.createElement("tr");
              tr.innerHTML = `
                <td>${u.id}</td>
                <td>${u.nombre}</td>
                <td>${u.apellido}</td>
                <td>${u.edad}</td>
                <td>${u.email}</td>
                <td>${u.rol}</td>
                <td>${u.bloqueado ? "Sí" : "No"}</td>
                <td>
                  <button onclick="showSection('detalle'); verDetalleEmail('${
                    u.email
                  }')">
                    Ver
                  </button>
                </td>
                <td>
                  <button onclick="eliminarUsuario(${u.id})">
                    Eliminar
                  </button>
                </td>
              `;
              tbody.appendChild(tr);
            });
          });
      }

      // 2: Detalle por email
      function verDetalleEmail(email) {
        const e = email || document.getElementById("detalleEmail").value;
        fetch(`/admin/usuarios/search?email=${encodeURIComponent(e)}`)
          .then((r) => r.json())
          .then((list) => {
            const u = list[0];
            if (!u) return alert("No se encontró usuario.");
            document.getElementById("detalle-usuario").innerHTML = `
              <p><strong>ID:</strong> ${u.id}</p>
              <p><strong>Nombre:</strong> ${u.nombre}</p>
              <p><strong>Apellido:</strong> ${u.apellido}</p>
              <p><strong>Edad:</strong> ${u.edad}</p>
              <p><strong>Email:</strong> ${u.email}</p>
              <p><strong>Rol:</strong> ${u.rol}</p>
              <p><strong>Bloqueado:</strong> ${u.bloqueado ? "Sí" : "No"}</p>
            `;
          });
      }

      // 3: Actualizar rol por email
      function actualizarRolEmail() {
        const email = document.getElementById("rolEmail").value;
        const rol = document.getElementById("nuevoRol").value;
        fetch(`/admin/usuarios/search?email=${encodeURIComponent(email)}`)
          .then((r) => r.json())
          .then((list) => {
            if (!list[0]) return alert("Usuario no encontrado.");
            const id = list[0].id;
            return fetch(`/admin/usuarios/${id}/rol`, {
              method: "PUT",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ rol }),
            });
          })
          .then((res) => res.json())
          .then((u) => alert("Rol actualizado a " + u.rol))
          .catch((err) => console.error(err));
      }

      // 4: Actualizar bloqueo por email
      function actualizarBloqueoEmail() {
        const email = document.getElementById("bloqEmail").value;
        const bloq = document.getElementById("estadoBloqueo").value === "true";
        fetch(`/admin/usuarios/search?email=${encodeURIComponent(email)}`)
          .then((r) => r.json())
          .then((list) => {
            if (!list[0]) return alert("Usuario no encontrado.");
            const id = list[0].id;
            return fetch(`/admin/usuarios/${id}/bloqueo`, {
              method: "PUT",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ bloqueado: bloq }),
            });
          })
          .then((res) => res.json())
          .then((u) =>
            alert("Bloqueo actualizado: " + (u.bloqueado ? "Sí" : "No"))
          )
          .catch((err) => console.error(err));
      }

      // 5: Buscar usuarios por email
      function buscarUsuarios() {
        const email = document.getElementById("filtroEmail").value;
        fetch(`/admin/usuarios/search?email=${encodeURIComponent(email)}`)
          .then((r) => r.json())
          .then((list) => {
            if (!list.length) return alert("No se encontraron usuarios.");
            let html = "<ul>";
            list.forEach((u) => {
              html += `<li>${u.nombre} ${u.apellido} (${u.email})</li>`;
            });
            html += "</ul>";
            document.getElementById("resultadosBusqueda").innerHTML = html;
          });
      }

      // Eliminar usuario
      function eliminarUsuario(id) {
        if (!confirm("¿Eliminar este usuario?")) return;
        fetch(`/admin/usuarios/${id}`, { method: "DELETE" })
          .then((r) => r.json())
          .then((d) => {
            alert(d.mensaje);
            cargarUsuarios();
          });
      }
    </script>
  </body>
</html>

----------------------------------------
# C:\americo\API\TaskGenie\templates\dashboard_alumno.html
<!-- Dashboard para alumnos -->

----------------------------------------
# C:\americo\API\TaskGenie\templates\dashboard_profesor.html
<!-- Dashboard para profesores -->

----------------------------------------
# C:\americo\API\TaskGenie\templates\errores.html
<!-- html para manejo de errores -->
<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>Error 404 - No Encontrado</title>
  </head>
  <body>
    <h1>Error 404</h1>
    <p>{{ mensaje }}</p>
    <a href="/">Volver al inicio</a>
  </body>
</html>

----------------------------------------
# C:\americo\API\TaskGenie\templates\dashboard.html
<!-- templates/dashboard.html -->
<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>Dashboard</title>
  </head>
  <body>
    {% if user %}
    <h1>¡Bienvenido, {{ user.nombre }}!</h1>
    <p>Rol: {{ user.rol.value }}</p>
    {% else %}
    <h1>¡Bienvenido al Dashboard!</h1>
    {% endif %}
    <p>Aquí se muestran las funcionalidades para el usuario autenticado.</p>
    <a href="/">Volver al inicio</a>
  </body>
</html>

----------------------------------------
# C:\americo\API\TaskGenie\templates\index.html
<!-- index.html - Página de inicio con formulario de login -->
<!-- templates/index.html - Página de inicio con formulario de login -->
<!-- templates/index.html -->
<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>TaskGenie - Login</title>
  </head>
  <body>
    <h1>Login usando Form</h1>
    {% if error %}
    <p style="color: red">{{ error }}</p>
    {% endif %}
    <form action="/login_form" method="post">
      <label>Email:</label>
      <input type="text" name="email" required />
      <br />
      <label>Clave:</label>
      <input type="password" name="clave" required />
      <br />
      <button type="submit">Ingresar</button>
    </form>
    <p>¿No tienes una cuenta? <a href="/registro">Regístrate aquí</a></p>
  </body>
</html>

----------------------------------------
# C:\americo\API\TaskGenie\templates\login.html
<!-- Vista de login -->

----------------------------------------
# C:\americo\API\TaskGenie\templates\registro.html
<!-- Formulario de registro -->
<!-- templates/registro.html -->
<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>Registro de Usuario - TaskGenie</title>
  </head>
  <body>
    <h1>Registro de Usuario</h1>
    {% if error %}
    <p style="color: red">{{ error }}</p>
    {% endif %}
    <form action="/registro_form" method="post">
      <label for="nombre">Nombre:</label>
      <input type="text" id="nombre" name="nombre" required />
      <br />
      <label for="apellido">Apellido:</label>
      <input type="text" id="apellido" name="apellido" required />
      <br />
      <label for="edad">Edad:</label>
      <input type="number" id="edad" name="edad" required />
      <br />
      <label for="fecha_nacimiento">Fecha de Nacimiento (YYYY-MM-DD):</label>
      <input
        type="text"
        id="fecha_nacimiento"
        name="fecha_nacimiento"
        placeholder="YYYY-MM-DD"
        required
      />
      <br />
      <label for="email">Email:</label>
      <input type="email" id="email" name="email" required />
      <br />
      <label for="rol">Tipo usuario:</label>
      <select id="rol" name="rol" required>
        <option value="profesor">Profesor</option>
        <option value="alumno">Alumno</option>
        <option value="administrador">Administrador</option>
      </select>
      <br />
      <label for="clave">Clave:</label>
      <input type="password" id="clave" name="clave" required />
      <br />
      <button type="submit">Registrarse</button>
    </form>
    <p><a href="/">Volver al inicio</a></p>
  </body>
</html>

